algorithm
5.23
dynamic programming 
question 62 unique paths 
	create a matrix, mark the value in the spot

5.26
dnamic programming 
question 63 unique paths two
	same as the question 62, mark 0 when meet the block
	O(n^2)

question 64 Minimum path sum 
	same as the question 62,63 
	O(n^2)

question 10 regular expression matching
	create a matrix, if character same mark 1, else if no same move p. 
	else if meet '.',  else if meet "*"
	when we meet "*", we go toward right not downside
	1.if p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1];
	2.if p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
	3.if p.charAt(j) == '*':
	3.1 if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2] //in this case, a* only counts as empty
	3.2 if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
		dp[i][j] = dp[i-1][j] //in this case, a* counts as multiple a
		or dp[i][j] = dp[i][j-1] // in this case, a* counts as single a
		or dp[i][j] = dp[i][j-2] // in this case, a* counts as empty
		O(n^2)

5.27
question 46 permutation
	use backtrack
	it's clear that the run time is O(n!), as it's permutation questions.
	in order to solve the permutation question, we need to use the recursive method.
	we could use the DFS. there are total n level, at every level i, there are i sub problem.
	at every subproblem we exchange once. we first set a border, before the border is the number which have 
	finished exchange, after the border is the content we need to exchange. 
	we swap, then going to next level, after we finish the all the swap, we returned to the origin.

question 47 permutation II
	same as the question 46, however it becomes harder as there are duplicate element appear. 
	we need to use the contains methed to cut the duplicate answer.

question 48 rotate image
	in this question, we are asked to rotate the image in place 90 degree. 
	the hardest part is that the question asked as not to create a new matrix.
	we know the change for is (i,j)-->(j,n-i-1)-->(n-i-1,n-j-1)-->(n-j-1,i)
	so we separate the image into four part and rotate it.

6.2 
question 23 merge k sorted lists
	normally, we could use the brute force way such as traversal all the number in the lists or we could 
	compare one by one. the run time complexity is O(k*N) k is the number of the lists.
	further we could use the merge sort method to decrease the run time. such as we meger two linked list 
	into one, and finally we got one linked list. this is a recursive way. there are logK level, k is the
	number of the linked lists. at every level we traversal all the n numbers once. so the run time is 
	O(logk*n)

question 30 Substring with concatenation of all words
	I'm going to use a way more stupid method to solve this problem. I just calculate the target string 
	length, then i move one character by one character to check whether the substring matches the array.
	in the subproblem, which i use for loop and create a helper array in order to check whether the two 
	string match

question 41 First Missing Positive 
	I'm going to create a helper array. suppose the nums array length is n. in the helper array, I set the 
	length as n+2, and I separate it into three part, if the number in nums <=0 do help[0]++, if nums>=n do
	help[n+1]++ or we just help[nums]++. this is the first for loop conplexity is O(n), as we traversal the
	nums once and put every number in right position. then I traversal the help array from small to big, 
	once we found there's a 0, which means we find the smallest positive number.

6.3 
question 32 longest valid parentheses
	dynamic programming problem
	in this question, I'm going to use a one-dimensional array to solve this problem.
	in the helpe array, we set first, second as 0. 
	when we meet the '(', we set it as 0, as there's no succuss parentheses. when we meet the ')' we 
	check the previous character if it's '(' we do help[n]=help[n-2]+2 
	otherwise if it's ')' we do help[n]=help[n-1]+help[n-help[n-1]-2]+2;
	finally, keep track the largest number and get answer;

6.16
question 53 maximum Subarray
	dynamic programming problem
	in this question, we need to separate it into small question. we use a list to save the maximum value at
	each position. 
	so when the array length is 1, we know that the max is this value, when the length is two, we check the
	max(list[i-1]+nums[i],nums[i]), as we know at the position i, we have already know the maximum of position
	i-1, we need to check whether we are going to include i, if the vlaue is larger, we put it in, if the 
	value is smaller, we put the current value nums[i], as in the list vlaue at postion i means the maximum
	value which include the number at position i. 
	finally from the list we get the max value.

question 54 spiral matrix
	array programming 
	in this question, we keep track the number layer by layer, I'm going to use the outside layer to make 
	an example. at every layer there are four process, which we first get the toppest part, then the right
	part, bottom part, finally the left part. in this process we need to keep updating the boudary number.

question 55 jump game
	this is a pretty easy question. we could use the greedy method. we start from the zero point, we define
	a pointer which means the most rightest point we could reach. at every element we first judge whether 
	it could reach, (rightmost>i), if not we return flase, then we update the most right postion.

question 56 merge interval
	there are two steps to solve this problem. the first step is we need to sort this array using quick
	sort. I'm going to quickly review the quick sort. we set the first number in the array as a index. 
	we go back from front to find the number which is smaller than the index. then we put that number at 
	the index position. then we start from front to back find the number which is larger than the index,we 
	put the larger number at the position of the smaller number. and we put the index at the large number
	position. after we track the whole array, we could separate the array into two part, the number in front
	part is smaller than the index. 
	the second step is merge these array. we just merge the array one by one and finally get the result.

question 59 spiral matrix II
	same as the question 54, just use a while loop with four for loop.

6.17 
question 60 permutation Sequence
	it's a permutation quesition, but we can't use permutation as we can't access the spesific position.
	we need to use the residue to get every number. we define a help method to get every number. we calculate
	(n-1)! to find the relative position in the list.

question 61 rotate list 
	it's a easy question, we don't need any recursive method. we first combine the tail and head to make the
	listnode become a ring. then we find the correct position and separate it to get the answer.



	         
